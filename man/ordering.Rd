% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/count_bindings.R
\name{set_order_count_method}
\alias{set_order_count_method}
\alias{set_ordering_cols}
\alias{set_result_order_var}
\title{Set the ordering logic for the count layer}
\usage{
set_order_count_method(e, order_count_method)

set_ordering_cols(e, ...)

set_result_order_var(e, result_order_var)
}
\arguments{
\item{e}{A \code{group_count} layer}

\item{order_count_method}{The logic determining how the rows in the final
layer output will be indexed. Options are 'byrow', 'byfactor', and
'byvarn'.}

\item{...}{Unquoted variables used to select the columns whose values will be
extracted for ordering.}

\item{result_order_var}{The numeric value the ordering will be done on.
This can be either n, distinct_n, pct, or distinct_pct. Due to the
evaluation of the layer you can add a value that isn't actually being
evaluated, if this happens this will only error out in the ordering.}
}
\value{
Returns the modified layer object. The 'ord_' columns are added
  during the build process.
}
\description{
Count layers are generally displayed in a descending order for a particular
treatment group. However Tplyr also supports displaying based on the factor
of the treatment variable, or on a specified <VAR>N variable already in the
dataset (i.e. VISIT <-> VISITN, TRT <-> TRTN). Defaults to 'byrow'.
}
\section{Sorting a Table}{

You can pass the output of a build to reorder the columns. The function will
order the columns in the order the elipsis was passed. If all of the columns
aren't used, the columns that weren't selected will be moved to the end of
the data.frame after the columns that were passed.

When a table is built, the output has several ordering(ord_) columns that are
appended. The first represents the layer index. The index is determined by
the order the layer was added to the table. The following are the indicies
for the by variables and the target variable. The by variables are ordered
based on:
1) A <VAR>N variable (i.e. VISIT -> VISITN, TRT -> TRTN) if one is present.

2) If no <VAR>N variable is present, it is ordered based on the factor
present in the target dataset.

3) If the variable is not a factor in the
target dataset, it is coersed to one and ordered alphabetically.

The target variable is ordered depending on the type of layer. See more below.
}

\section{Ordering a Count Layer}{

There are many ways to order a count layer depending on the preferences of
the table programmer. \code{Tplyr} supports sorting by a descending amount in
a column in the table, sorting by a <VAR>N variable, and sorting by a custom
order. These can be set using the `set_order_count_method` function.
\itemize{
\item{Sorting by a numeric count - A selected numeric value from a selected
column will be indexed based on the descending numeric value. The numeric
value extracted defaults to 'n' but can be changed with
`set_result_order_var`. The column selected for sorting defaults to the
first value in the treatment group varialbe. If there were arguments passed
to the 'cols' argument in the table those must be specified with
`set_ordering_columns`.}
\item{Sorting by a 'varn' variable - If the treatment variable has a <VAR>N
variable. It can be indexed to that variable.}
\item{Sorting by a factor(Default) - If a factor is found for the target
variable in the target dataset that is used to order, if no factor is found
it is coersed to a factor and sorted alphabetically.}
\item{Sorting a nested count layer - As is standard with AE tables, the first
target variable is sorted either alphabetically, if a factor isn't provided,
or ordered based on a supplided factor. The second variable is sorted with
the 'bycount' method, the column and numeric value can be assigned with
`set_ordering_cols` and `set_result_order_var` respectively.}
}
}

\section{Ordering a Desc Layer}{

The order of a desc layer is mostly set during the object construction. The
by variables are resolved and index with the same logic as the count layers.
The target variable is ordered based on the format strings that were used
when the layer was created.
}

\examples{
library(dplyr)

# Default sorting by factor
t <- tplyr_table(mtcars, gear) \%>\%
  add_layer(
    group_count(cyl)
  )
build(t)

# Sorting by <VAR>N
mtcars$cylN <- mtcars$cyl
t <- tplyr_table(mtcars, gear) \%>\%
  add_layer(
    group_count(cyl) \%>\%
      set_count_order_method("byvarn")
  )

# Sorting by row count
t <- tplyr_table(mtcars, gear) \%>\%
  add_layer(
    group_count(cyl) \%>\%
    set_count_order_method("bycount") \%>\%
    # Orders based on the 6 gear group
    set_ordering_cols(6)
  )
}
